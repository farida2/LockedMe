  
SPRINTS IN JIRA: 
Week 1:
Spec:
Spec general updates: capabilities, appearance, and user interactions; first version.
Flowchart -> first draft 


Spec review, and approval / going through the project spec and requirements again

Code: welcomeInfo() : to printout the application name and the developer details 
Test: welcomeInfo() : adjusting the words, space between and the look
Code: menu() : to printout the menu options for the user , within a Do-While loop
Test : Do-While loop : by exerting numbers 1-5 (5 to exit the app) , if the number is not right , the console outputs message , if the user enters a non-integer , the console outputs an exception message

Week 2: 
Spec:
Spec updates / writing the pseudo code 
Adding a divider() method : few printout lines ,to make the outputs clearer 
Code: getListOfFiles(String directoryPath)
Test: getListOfFiles(String directoryPath)

Code: addFile(String fileName)
Test:  addFile(String fileName)

Code: deleteFile(String fileName)
Test: deleteFile(String fileName)

Week 3:
Spec:
Spec updates 
Spec final review, and approval
Project completion meeting
Code: searchFile(String fileName)
Test: searchFile(String fileName)


 DESIGN REQUIREMENTS SPECIFICATIONS DOCUMENT (DRS)
First Page: Company Lockers Pvt. Ltd.     Team Members: Belhous Farida   
Project Name:LockedMe.com
Design Requirements Specifications Document 
Approvers Signatures: Farida Belhous
                  		 Senior Engineer A
                   		Project Lead
Introduction and Objectives: 
The current document represents the specification of a prototyped application, from LockedMe.com. The goals are to develop a user interface using JAVA to accept user inputs. Other features of the interface are retrieving file names, adding/deleting/searching for a user, and closing the application. The user interaction will be via a command line.
The following features are not part of the specification, so they will not implemented.
Adding new directory /directories
Reading files
The goal of the company is to deliver a high-end quality product as early as possible.
The stakeholders will analyze the current proposal document and provide a decision for the go ahead.













Core concepts used:
2.1 Flowchart: The figure below shows the flowchart for the project. (Check the attached screen shots If it doesn’t appear)

2.2 Core Concepts: for example Data Structures where sorting and searching techniques are used:merge sort to a sort an array of files
2.3 Algorithms: the algorithms are described in section 4. There will be one algorithm for every single feature. (pseudo code)

 


Tools Used:
Eclipse version:2020-06 (4.16.0)
Java version java 14.0.2 2020-07-14
Java(TM) SE RunTime Environment (build 14.0.2+12-46)
Java HotSpot(TM) 64-bit server VM
Git version 2.24.3 (Apple Git-128)
GitHub: https://github.com/farida2/LockedMe
Scrum: Atlassian 

Requirements Specifications:

List of feature Tags: 8 features
	1) Display the application name and the developer details
	2) Features to accept the user input to select one of the options listed 
	3) Option to navigate back to the main context
	4) Option to return the current file names in ascending order 
	5) Add a file to the existing directory list
	6) Search a user specified file from the main directory
	7) Delete a user specified file from the existing directory list
	8) Exit the app

1 – Feature 1): 
	Project Name, Application name and the developer details  
The details of the user interface such as options displaying the user interaction information.
	Using System.out.println()  to output the informations 

2 —Feature 2): Print out a menu asking the user to enter a number 1-5 options
3 —Feature 3): Return the current file names in ascending order 
	A Do-While() loop that will output the a menu asking the user to enter a number 1-5 options, 		otherwise a warning message or an exception message if the users enters a non-integer.
	this loop will give the user the option to navigate back to the main context

4—Feature 4):	Return the current file names in ascending order,
	using sort() method on an array of files (merge sort) to go through all the files , and deeper inside all the folders , then print them out in an ascending order

5 —Feature 5): 
	Asks the user to enter the file name with its extension
	Adds a file to the existing directory list , 
	Asks the user to enter the file name with its extension 
	creates new file using the method createNewFile() from the java library ( java.io.File)
	if the file does not exist
	if a file exists with same , the file will not be created and it printouts a message to tell the 			user that there is file with same name

6 —Feature 6): 
	Asks the user to enter the file name with its extension
	Using the for-each statement to search through the list of files
	Adding condition to compare the files names to the name of the file that the user entered
	if the name is found , the console outputs the file exists
	if the names don’t match , the console output FNF

7 —Feature 7): 
	Asks the user to enter a file name (to be deleted) with its extension 
	using the method delete() from the package java.io
	if the file’s name is found , the console will output that the file is deleted (I double check by selecting number 1 from the menu - display all files)
	if the file path is not found , the console will output that the file does not exist
8 — Feature 8):  
	If the user enters 5 , the application will exit (will be terminated)
	using the method exit() of the class System from the package java.lang
	which terminates the currently running JVM
	and the console will output a message "----Program ended!----"
	
 
	

	

5. Implementation:
	check gitHub for the implementation : https://github.com/farida2/LockedMe
	
6. Scrum:
	1.The project will be done using 3 sprints. The duration of each sprint will be 1 week (5 working days).
The steps for each sprint will be 1 sprint planning meeting, and 1 sprint closure meeting.
The details for the tasks for each sprint can be found in: TBD
	2.Link to Github
The java code can be found in https://github.com/farida2/LockedMe
6. Conclusion: 
	Enhancing the application and defining the USPs (Unique Selling Points)
	The application can be enhanced by providing a Graphical suer interface, rather than a command line input from the user .

 
 



